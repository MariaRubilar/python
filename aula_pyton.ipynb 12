{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNkMls9r+Tqwfb0BRnuztuB",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/MariaRubilar/python/blob/main/aula_pyton.ipynb%2012\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Aula 1** ‚õ∫ üêÑ ü•ä"
      ],
      "metadata": {
        "id": "pVxw8GRe7NG9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"I competi√ß√£o de programa√ß√£o d√° Start\")\n",
        "ano = \"IX\"\n",
        "print(ano, \"competi√ß√£o de programa√ß√£o da Start\")\n",
        "print(f\"{ano} competi√ß√£o de programa√ß√£o da Start\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zlTN_sR4z4-8",
        "outputId": "24bbf484-d79a-4b0c-85c5-f165120547ea"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "I competi√ß√£o de programa√ß√£o d√° Start\n",
            "IX competi√ß√£o de programa√ß√£o da Start\n",
            "IX competi√ß√£o de programa√ß√£o da Start\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Aula 2** „äó ‚ú¥ ‚öî\n"
      ],
      "metadata": {
        "id": "5R6cPn4803Nr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "livro_ficcao = 8\n",
        "livro_n_ficcao = 10\n",
        "livro_infantil = 6\n",
        "pontos_rodrigo = livro_ficcao + livro_n_ficcao + livro_infantil\n",
        "print(f\"Os pontos totais do Rodrigo s√£o {pontos_rodrigo}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HZ8bKS17091C",
        "outputId": "71469694-e0af-474d-862c-a1a0616b794f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Os pontos totais do Rodrigo s√£o 24\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Aula 3"
      ],
      "metadata": {
        "id": "vw7ZlwF4zzfw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "numero_de_alunos = int(input(\"Digite a quantidade de alunos: \"))\n",
        "numero_de_monitores = int(input(\"Digite a quantidade de monitores: \"))\n",
        "numero_de_professores = 8\n",
        "if numero_de_alunos + numero_de_monitores + numero_de_professores <= 50:\n",
        " resposta_positiva = \"pode ir\"\n",
        "resposta_negativa = \"n√£o pode ir\"\n",
        "if numero_de_alunos + numero_de_monitores + numero_de_professores <= 50:\n",
        " print(resposta_positiva)\n",
        "else:\n",
        "  print(resposta_negativa)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XVscjHKLz1sl",
        "outputId": "5f2b3a14-e278-4b57-ba3f-530e5c512574"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Digite a quantidade de alunos: 30\n",
            "Digite a quantidade de monitores: 10\n",
            "pode ir\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Aula 4** ‚öõ üá± ‚úÖ\n"
      ],
      "metadata": {
        "id": "zwNh-Hdv1Oxi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "P= int(input(\"Digite a posi√ß√£o da porta P (0 ou 1): \"))\n",
        "R = int(input(\"Digite a posi√ß√£o da porta R (0 ou 1): \"))\n",
        "if P == 0:\n",
        " print(\"C\")\n",
        "elif R == 1:\n",
        " print(\"A\")\n",
        "else:\n",
        " print(\"B\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dim_ZpXc1vJm",
        "outputId": "0d3f2512-a3d1-4d1e-8327-c0eed9b39bac"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Digite a posi√ß√£o da porta P (0 ou 1): 64\n",
            "Digite a posi√ß√£o da porta R (0 ou 1): 154\n",
            "B\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Aula 5** ‚öì ‚ôà ‚Åâ"
      ],
      "metadata": {
        "id": "1OZwH96s2VkD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def tabuada(numero):\n",
        "    for contador in range(1, 11): # Gera n√∫meros de 1 a 10\n",
        "        print(f\"{numero} x {contador} = {numero * contador}\")\n",
        "numero = int(input(\"Digite um n√∫mero para ver sua tabuada: \"))\n",
        "tabuada(numero)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bUM5PlK12Xdj",
        "outputId": "4f8ba42b-9309-499e-9980-3b4a27e7500f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Digite um n√∫mero para ver sua tabuada: 4\n",
            "4 x 1 = 4\n",
            "4 x 2 = 8\n",
            "4 x 3 = 12\n",
            "4 x 4 = 16\n",
            "4 x 5 = 20\n",
            "4 x 6 = 24\n",
            "4 x 7 = 28\n",
            "4 x 8 = 32\n",
            "4 x 9 = 36\n",
            "4 x 10 = 40\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "U4pvpI6522RK"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#**Aula 6** ‚úà ‚è∞ ‚öì"
      ],
      "metadata": {
        "id": "LxKmznf13ZMS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "peso= float(input(\"Digite seu peso (em kg): \"))\n",
        "altura = float(input(\"Digite sua altura (em metros): \"))\n",
        "imc = peso / (altura ** 2)\n",
        "print(f\"\\nSeu IMC √©: {imc:.2f}\")\n",
        "if imc < 18.5:\n",
        "     print(\"Voc√™ est√° abaixo do peso.\")\n",
        "elif 18.5 <= imc < 25:\n",
        "     print(\"Voc√™ est√° no peso ideal.\")\n",
        "elif 25 <= imc < 30:\n",
        "     print(\"Voc√™ est√° com sobrepeso.\")\n",
        "else:\n",
        "     print(\"Voc√™ est√° acima do peso.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "swWPbfQ93sN9",
        "outputId": "4efce46d-0e39-49f3-f508-d22badff76fa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Digite seu peso (em kg): 64\n",
            "Digite sua altura (em metros): 1.60\n",
            "\n",
            "Seu IMC √©: 25.00\n",
            "Voc√™ est√° no peso ideal.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Aula 7** ‚öó ‚úà ‚öì"
      ],
      "metadata": {
        "id": "09vcOa-D4-SV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(\" Sou assistente virtual, como posso ajudar? \\n\")\n",
        "nome = input(\" digite seu nome\")\n",
        "print(\"Ol√°,\" + nome +\". Qual √© a sua d√∫vida hoje?\")\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XmToZXcp5FqQ",
        "outputId": "4dab5206-6180-4217-f652-eb181827fca4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " Sou assistente virtual, como posso ajudar? \n",
            "\n",
            " digite seu nomemaria\n",
            "Ol√°,maria. Qual √© a sua d√∫vida hoje?\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print (\"Sou seu assistente virtual, como posso ajudar? \\n \")\n",
        "nome = input(\"digite seu nome: \")\n",
        "print(f\"Ol√°, {nome}. Qual √© a sua d√∫vida hoje?\")\n",
        "resposta = input(\"Qual o assunto que deseja tratar: Matem√°tica , PyThOn , Javascript \").lower()\n",
        "print(f\"Que bom, {nome}, vamos falar sobre {resposta}\")\n"
      ],
      "metadata": {
        "id": "wZNfm-wv1qxy",
        "outputId": "7dbda08c-c74a-433e-e8bc-a008fce3a53b",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Sou seu assistente virtual, como posso ajudar? \n",
            " \n",
            "digite seu nome:  Maria\n",
            "Ol√°,  Maria. Qual √© a sua d√∫vida hoje?\n",
            "Qual o assunto que deseja tratar: Matem√°tica , PyThOn , Javascript  Matematica\n",
            "Que bom,  Maria, vamos falar sobre  matematica\n"
          ]
        }
      ]
    }
  ]
}